/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package morty.Vustas;

import javax.swing.JOptionPane;
import Config.Conexion;
import Config.Consultas;
import Config.InsertarDatos;
import Config.UpdateDatos;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import me.legrange.mikrotik.ApiConnection;
import me.legrange.mikrotik.MikrotikApiException;
import microtik.enableDisableQueue;
import microtik.queueRafagas;

/**
 *
 * @author cisco
 */
public class simpleConfiguracion extends javax.swing.JInternalFrame {

    /**
     * Creates new form simpleConfiguracion
     */
    public simpleConfiguracion() {
        initComponents();
        listarMicrotik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submenu_dhcp_leases = new javax.swing.JPopupMenu();
        click_make_static = new javax.swing.JMenuItem();
        click_registrar = new javax.swing.JMenuItem();
        submenu_simple_queue = new javax.swing.JPopupMenu();
        click_desabilitar = new javax.swing.JMenuItem();
        click_habilitar = new javax.swing.JMenuItem();
        click_registro_bd = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        comboMicrotik = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        entryUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        entryPassword = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        entryHost = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        entryTargetQueue = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaSimpleQueue = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnRegistroDBDhcp = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        entryDireccionesIp = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_dhcp_leases = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        entryNombreQueue = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        entrySegmento = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        entryMaxUp = new javax.swing.JTextField();
        entryMaxDown = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnAplicat = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tablaAddress = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();

        click_make_static.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/flechas-para-rodear.png"))); // NOI18N
        click_make_static.setText("Make Static");
        click_make_static.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_make_staticActionPerformed(evt);
            }
        });
        submenu_dhcp_leases.add(click_make_static);

        click_registrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-usuario.png"))); // NOI18N
        click_registrar.setText("Registrar");
        click_registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_registrarActionPerformed(evt);
            }
        });
        submenu_dhcp_leases.add(click_registrar);

        click_desabilitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mano-limite.png"))); // NOI18N
        click_desabilitar.setText("Desabilitar");
        click_desabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_desabilitarActionPerformed(evt);
            }
        });
        submenu_simple_queue.add(click_desabilitar);

        click_habilitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tocar.png"))); // NOI18N
        click_habilitar.setText("Habilitar");
        click_habilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_habilitarActionPerformed(evt);
            }
        });
        submenu_simple_queue.add(click_habilitar);

        click_registro_bd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-usuario.png"))); // NOI18N
        click_registro_bd.setText("Regitrar");
        click_registro_bd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_registro_bdActionPerformed(evt);
            }
        });
        submenu_simple_queue.add(click_registro_bd);

        setClosable(true);
        setIconifiable(true);
        setTitle("Opciones Varias");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta"));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/perno-circular-del-tapon.png"))); // NOI18N
        jButton2.setText("Conectar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Microtik");

        jLabel1.setText("Username");

        entryUsername.setEditable(false);

        jLabel2.setText("Password");

        entryPassword.setEditable(false);

        jLabel3.setText("Host");

        entryHost.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(entryUsername)
                            .addComponent(entryHost))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel7)
                    .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(entryUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(entryPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entryHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Target");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtrar.png"))); // NOI18N
        jButton1.setText("Filtrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/busqueda.png"))); // NOI18N
        jButton4.setText("Obtener");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entryTargetQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(492, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(entryTargetQueue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tablaSimpleQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Target", "Max Limit", "Parent", "#"
            }
        ));
        tablaSimpleQueue.setComponentPopupMenu(submenu_simple_queue);
        jScrollPane2.setViewportView(tablaSimpleQueue);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 947, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Simple Queue", jPanel4);

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnRegistroDBDhcp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/flecha-de-circulo-de-disquete-a-la-derecha.png"))); // NOI18N
        btnRegistroDBDhcp.setText("Registrar");
        btnRegistroDBDhcp.setEnabled(false);
        btnRegistroDBDhcp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistroDBDhcpActionPerformed(evt);
            }
        });

        jLabel4.setText("Direccion IP");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtrar.png"))); // NOI18N
        jButton3.setText("Filtrar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/busqueda.png"))); // NOI18N
        jButton8.setText("Obtener");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entryDireccionesIp, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegistroDBDhcp)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistroDBDhcp)
                    .addComponent(jLabel4)
                    .addComponent(entryDireccionesIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton8))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tabla_dhcp_leases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "IP", "MAC", "Host", "Server", "#"
            }
        ));
        tabla_dhcp_leases.setComponentPopupMenu(submenu_dhcp_leases);
        tabla_dhcp_leases.setInheritsPopupMenu(true);
        jScrollPane3.setViewportView(tabla_dhcp_leases);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dhcp Leases", jPanel6);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("New Queue Parent"));
        jPanel12.setAlignmentX(1.5F);

        jLabel6.setText("Nombre cola padre");

        jLabel8.setText("Segmento de RED");

        entrySegmento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrySegmentoActionPerformed(evt);
            }
        });

        jLabel9.setText("Max Limit");

        jLabel10.setText("Upload M");

        jLabel11.setText("Download M");

        btnAplicat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/flecha-de-circulo-de-disquete-a-la-derecha.png"))); // NOI18N
        btnAplicat.setText("Aplicar");
        btnAplicat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicatActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/busqueda.png"))); // NOI18N
        jButton7.setText("Obtener Address List");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entrySegmento, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(entryNombreQueue, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(entryMaxUp, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(entryMaxDown, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(btnAplicat, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(entryNombreQueue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(entrySegmento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(entryMaxUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(entryMaxDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAplicat)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Address List"));

        tablaAddress.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Address", "Network", "Interace"
            }
        ));
        tablaAddress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaAddressMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tablaAddress);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Cola Padre", jPanel9);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String microtikSelect = (String) comboMicrotik.getSelectedItem();
        if (microtikSelect == null) {
            JOptionPane.showMessageDialog(null, "Por favor selecciona el microtik a realizar configuracion. Si no aparecen, registra uno");
        } else {
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();
            String sql = "SELECT ip, username, password FROM credenciales_microtik WHERE nombre = ? LIMIT 1";
            if (cn != null) {
                PreparedStatement cursor;
                ResultSet resultado;
                try {
                    cursor = cn.prepareStatement(sql);
                    cursor.setString(1, microtikSelect);

                    resultado = cursor.executeQuery();

                    if (resultado.next()) {
                        String ip = resultado.getString("ip");
                        String username = resultado.getString("username");
                        String password = resultado.getString("password");

                        entryHost.setText(ip);
                        entryUsername.setText(username);
                        entryPassword.setText(password);


                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Problemas con la consulta del microtik: " + e, "SpiderNET", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    public void listarMicrotik() {
        Consultas consultas = new Consultas();
        ArrayList<String> nombreMicrotik = consultas.nombresMicrotiks();
        for (String microtiks : nombreMicrotik) {
            comboMicrotik.addItem(microtiks);
        }
    }
    private void btnAplicatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicatActionPerformed
        String user = entryUsername.getText();
        String paswd = entryPassword.getText();
        String host = entryHost.getText();

        if (user.isBlank() && paswd.isBlank() && host.isBlank()) {
            JOptionPane.showMessageDialog(null, "Primero seleccina un microtik de tu lista");
        } else {
            String nombre = entryNombreQueue.getText();
            nombre = nombre.trim(); //eliminar espacios al inicio y final
            nombre = nombre.replaceAll("[^a-zA-Z0-9]", ""); //elimina los caracteres
            String maxS = entryMaxUp.getText();
            String maxB = entryMaxDown.getText();
            String target = entrySegmento.getText();
            String limit = maxS + "/" + maxB;

            if (nombre.isBlank() && maxS.isBlank() && maxB.isBlank() && target.isBlank()) {
                JOptionPane.showConfirmDialog(null, "Todos los campos son obligatorios!!", "SpiderNET", JOptionPane.ERROR_MESSAGE);
            } else {
                queueRafagas r = new queueRafagas();
                r.crearQueuePadre(nombre, target, limit, user, paswd, host);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAplicatActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String busqueda = entryDireccionesIp.getText();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo = (DefaultTableModel) tabla_dhcp_leases.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        tabla_dhcp_leases.setRowSorter(sorter);

        if (busqueda.isBlank()) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa un valor");
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + busqueda));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String busqueda = entryTargetQueue.getText();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo = (DefaultTableModel) tablaSimpleQueue.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        tablaSimpleQueue.setRowSorter(sorter);

        if (busqueda.isBlank()) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa un valor");
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + busqueda));
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String username = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        
        dhcpSimpleQueue(username, password, host);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String username = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();

        addresList(username, password, host);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String username = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        
        dhcpLeases(username, password, host);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void entrySegmentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrySegmentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entrySegmentoActionPerformed

    private void tablaAddressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAddressMouseClicked
        int filaSeleccionada = tablaAddress.getSelectedRow();
        if(filaSeleccionada >=0){
            String netork = (String)tablaAddress.getValueAt(filaSeleccionada, 1);
            netork = netork + "/24";
            entrySegmento.setText(netork);
        }else{
            JOptionPane.showMessageDialog(null, "Primero selecciona un elemento");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaAddressMouseClicked

    private void btnRegistroDBDhcpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistroDBDhcpActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegistroDBDhcpActionPerformed

    private void click_make_staticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_make_staticActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();

        if (user.isBlank() && password.isBlank() && host.isBlank()) {
            JOptionPane.showMessageDialog(null, "Primero selecciona un microtik de la lista");
        } else {
            int rows = tabla_dhcp_leases.getSelectedRow();
            if (rows >= 0) {
                String id = (String) tabla_dhcp_leases.getValueAt(rows, 4);
                enableDisableQueue queue = new enableDisableQueue();
                queue.makeStatic(user, password, host, id);
            } else {
                JOptionPane.showMessageDialog(null, "Primero selecciona un cliente de la tabla");
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_click_make_staticActionPerformed

    private void click_registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_registrarActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        String nombreMicrotik = (String) comboMicrotik.getSelectedItem();

        if (user.isBlank() && password.isBlank() && host.isBlank()) {
            JOptionPane.showMessageDialog(null, "Primero selecicona un microtik en la lista");
        } else {
            int row;
            row = tabla_dhcp_leases.getSelectedRow();
            if (row >= 0) {
                String nombre = (String) tabla_dhcp_leases.getValueAt(row, 2);
                String ip = (String) tabla_dhcp_leases.getValueAt(row, 0);
                InsertarDatos datos = new InsertarDatos();
                datos.registroClienteSimple(nombre, ip, nombreMicrotik);

            } else {
                JOptionPane.showMessageDialog(null, "Selecciona un Queue de la tabla primero");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_click_registrarActionPerformed

    private void click_desabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_desabilitarActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();

        if (user.isBlank() && password.isBlank() && host.isBlank()) {
            JOptionPane.showMessageDialog(null, "Primero selecicona un microtik en la lista");
        } else {
            int row;
            row = tablaSimpleQueue.getSelectedRow();
            if (row >= 0) {
                String id = (String) tablaSimpleQueue.getValueAt(row, 4);
                enableDisableQueue disableQueue = new enableDisableQueue();
                disableQueue.deshabilitar(id, host, user, password);
            } else {
                JOptionPane.showMessageDialog(null, "Selecciona un Queue de la tabla primero");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_click_desabilitarActionPerformed

    private void click_habilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_habilitarActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();

        if (user.isBlank() && password.isBlank() && host.isBlank()) {
            JOptionPane.showMessageDialog(null, "Primero selecicona un microtik en la lista");
        } else {
            int row;
            row = tablaSimpleQueue.getSelectedRow();
            if (row >= 0) {
                String id = (String) tablaSimpleQueue.getValueAt(row, 4);
                enableDisableQueue disableQueue = new enableDisableQueue();
                disableQueue.enable(id, host, user, password);
            } else {
                JOptionPane.showMessageDialog(null, "Selecciona un Queue de la tabla primero");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_click_habilitarActionPerformed

    private void click_registro_bdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_registro_bdActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        String nombreMicrotik = (String) comboMicrotik.getSelectedItem();

        if (user.isBlank() && password.isBlank() && host.isBlank()) {
            JOptionPane.showMessageDialog(null, "Primero selecicona un microtik en la lista");
        } else {
            int row;
            row = tablaSimpleQueue.getSelectedRow();
            if (row >= 0) {
                String nombre = (String) tablaSimpleQueue.getValueAt(row, 0);
                String ip = (String) tablaSimpleQueue.getValueAt(row, 1);
                InsertarDatos datos = new InsertarDatos();
                datos.registroClienteSimple(nombre, ip, nombreMicrotik);

            } else {
                JOptionPane.showMessageDialog(null, "Selecciona un Queue de la tabla primero");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_click_registro_bdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAplicat;
    private javax.swing.JButton btnRegistroDBDhcp;
    private javax.swing.JMenuItem click_desabilitar;
    private javax.swing.JMenuItem click_habilitar;
    private javax.swing.JMenuItem click_make_static;
    private javax.swing.JMenuItem click_registrar;
    private javax.swing.JMenuItem click_registro_bd;
    private javax.swing.JComboBox<String> comboMicrotik;
    private javax.swing.JTextField entryDireccionesIp;
    private javax.swing.JTextField entryHost;
    private javax.swing.JTextField entryMaxDown;
    private javax.swing.JTextField entryMaxUp;
    private javax.swing.JTextField entryNombreQueue;
    private javax.swing.JTextField entryPassword;
    private javax.swing.JTextField entrySegmento;
    private javax.swing.JTextField entryTargetQueue;
    private javax.swing.JTextField entryUsername;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPopupMenu submenu_dhcp_leases;
    private javax.swing.JPopupMenu submenu_simple_queue;
    private javax.swing.JTable tablaAddress;
    private javax.swing.JTable tablaSimpleQueue;
    private javax.swing.JTable tabla_dhcp_leases;
    // End of variables declaration//GEN-END:variables

// Método para convertir bits a una representación más legible (Ejemplo: 100M en vez de 100000000)
    private String formatBandwidth(String bandwidth) {
        if (bandwidth == null || !bandwidth.contains("/")) {
            return bandwidth; // Si es nulo o no tiene "/", devolver como está
        }

        String[] parts = bandwidth.split("/"); // Divide el string en "descarga/subida"
        return convertToReadable(parts[0]) + "/" + convertToReadable(parts[1]);
    }

// Método auxiliar para convertir bits a una unidad más legible
    private String convertToReadable(String value) {
        try {
            long bps = Long.parseLong(value);
            if (bps >= 1_000_000) {
                return (bps / 1_000_000) + "M"; // Convertir a Megabits por segundo
            } else if (bps >= 1_000) {
                return (bps / 1_000) + "K"; // Convertir a Kilobits por segundo
            } else {
                return bps + "bps"; // Si es menor a 1K, mostrar como está
            }
        } catch (NumberFormatException e) {
            return value; // Si no es un número válido, devolver el original
        }
    }

    public void dhcpSimpleQueue(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip);
            con.login(username, password);

            // Ejecutamos el comando
            List<Map<String, String>> results = con.execute("/queue/simple/print");

            // Iniciamos el modelo
            DefaultTableModel modelo = (DefaultTableModel) tablaSimpleQueue.getModel();

            // Limpiamos cualquier dato previo
            modelo.setRowCount(0);

            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontraron registros en Simple Queue.", "Información", JOptionPane.INFORMATION_MESSAGE);
                return; // Salir del método si no hay datos
            }

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[5];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get("name");
                clientesDhcpLeases[1] = removeSubnetMask(result.get("target")); // Separa IP de la máscara
                clientesDhcpLeases[2] = formatBandwidth(result.get("max-limit"));
                clientesDhcpLeases[3] = result.get("parent");
                clientesDhcpLeases[4] = result.get(".id");

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla (opcional si el modelo ya está enlazado)
            tablaSimpleQueue.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            JOptionPane.showMessageDialog(null, "Error de MikroTik: " + e.getMessage(), "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }


// Método para eliminar la máscara de subred de la IP
    private String removeSubnetMask(String target) {
        if (target == null) {
            return "";
        }
        return target.split("/")[0]; // Divide por "/" y toma solo la IP
    }

    public void dhcpLeases(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP
            List<Map<String, String>> results = con.execute("/ip/dhcp-server/lease/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tabla_dhcp_leases.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);
            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontraron registros en Simple Queue.", "Información", JOptionPane.INFORMATION_MESSAGE);
                return; // Salir del método si no hay datos
            }
            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[5];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get("address");
                clientesDhcpLeases[1] = result.get("mac-address");
                clientesDhcpLeases[2] = result.get("host-name");
                clientesDhcpLeases[3] = result.get("server");
                clientesDhcpLeases[4] = result.get(".id");

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla (opcional si el modelo ya está enlazado)
            tabla_dhcp_leases.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "Microtik", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void dhcpBlock(String username, String password, String ip) {
//        try {
//            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
//            con.login(username, password); // Iniciar sesión en el router
//
//            // Ejecutar el comando para obtener las leases DHCP bloqueadas
//            List<Map<String, String>> results = con.execute("/ip/dhcp-server/lease/print where blocked=yes");
//
//            // Inicializar el modelo de la tabla
//            DefaultTableModel modelo = (DefaultTableModel) tablaBlock.getModel();
//
//            // Limpiar cualquier dato previo en la tabla
//            modelo.setRowCount(0);
//            if (results.isEmpty()) {
//                JOptionPane.showMessageDialog(null, "No se encontraron registros en Simple Queue.", "Información", JOptionPane.INFORMATION_MESSAGE);
//                return; // Salir del método si no hay datos
//            }
//            // Iterar sobre los resultados y agregar las filas a la tabla
//            for (Map<String, String> result : results) {
//                Object[] clientesDhcpLeases = new Object[5];
//
//                // Asignar los valores a cada columna
//                clientesDhcpLeases[0] = result.get("address");
//                clientesDhcpLeases[1] = result.get("mac-address");
//                clientesDhcpLeases[2] = result.get("host-name");
//                clientesDhcpLeases[3] = result.get("server");
//                clientesDhcpLeases[4] = result.get(".id"); // ID del lease
//
//                // Agregar la fila al modelo de la tabla
//                modelo.addRow(clientesDhcpLeases);
//            }
//
//            // Establecer el modelo actualizado a la tabla
//            tablaBlock.setModel(modelo);
//
//            // Cerrar la conexión con el router
//            con.close();
//        } catch (MikrotikApiException e) {
//            // Mostrar mensaje de error si ocurre una excepción
//            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
//        }
    }

    public void addresList(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ip/address/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tablaAddress.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);
            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontraron registros en Simple Queue.", "Información", JOptionPane.INFORMATION_MESSAGE);
                return; // Salir del método si no hay datos
            }
            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[3];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get("address");
                clientesDhcpLeases[1] = result.get("network");
                clientesDhcpLeases[2] = result.get("interface");

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            tablaAddress.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

}
