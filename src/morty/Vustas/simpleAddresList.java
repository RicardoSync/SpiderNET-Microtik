/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package morty.Vustas;

import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import me.legrange.mikrotik.ApiConnection;
import me.legrange.mikrotik.MikrotikApiException;
import java.sql.*;
import Config.Conexion;
import Config.Consultas;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import microtik.deleteSimple;
import microtik.simpleQueue;
/**
 *
 * @author cisco
 */
public class simpleAddresList extends javax.swing.JInternalFrame {

    /**
     * Creates new form simpleAddresList
     */
    public simpleAddresList() {
        initComponents();
        listarMicrotik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        entryNetwork = new javax.swing.JMenuItem();
        click_dhcp_server = new javax.swing.JMenuItem();
        click_eliminar = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        click_eliminar_pool = new javax.swing.JMenuItem();
        popDHCP = new javax.swing.JPopupMenu();
        click_disable = new javax.swing.JMenuItem();
        click_enable = new javax.swing.JMenuItem();
        click_eliminar_dhcp_server = new javax.swing.JMenuItem();
        dhcpNetworkPop = new javax.swing.JPopupMenu();
        click_eliminar_dhcp_network = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        comboMicrotik = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        entryUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        entryPassword = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        entryHost = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        entryAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        entryInterfaz = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAdress = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        dhcp_tabla_chida = new javax.swing.JTable();

        entryNetwork.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/red-nube.png"))); // NOI18N
        entryNetwork.setText("Agregar network");
        entryNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryNetworkActionPerformed(evt);
            }
        });
        jPopupMenu1.add(entryNetwork);

        click_dhcp_server.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/carta-red.png"))); // NOI18N
        click_dhcp_server.setText("Agregar DHCP Server");
        click_dhcp_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_dhcp_serverActionPerformed(evt);
            }
        });
        jPopupMenu1.add(click_dhcp_server);

        click_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        click_eliminar.setText("Eliminar");
        click_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_eliminarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(click_eliminar);

        click_eliminar_pool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        click_eliminar_pool.setText("Eliminar POOL");
        click_eliminar_pool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_eliminar_poolActionPerformed(evt);
            }
        });
        jPopupMenu2.add(click_eliminar_pool);

        click_disable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mano-limite.png"))); // NOI18N
        click_disable.setText("Disable");
        click_disable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_disableActionPerformed(evt);
            }
        });
        popDHCP.add(click_disable);

        click_enable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/usuario-corriendo-rapido.png"))); // NOI18N
        click_enable.setText("Enable");
        click_enable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_enableActionPerformed(evt);
            }
        });
        popDHCP.add(click_enable);

        click_eliminar_dhcp_server.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        click_eliminar_dhcp_server.setText("Eliminar");
        click_eliminar_dhcp_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_eliminar_dhcp_serverActionPerformed(evt);
            }
        });
        popDHCP.add(click_eliminar_dhcp_server);

        click_eliminar_dhcp_network.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        click_eliminar_dhcp_network.setText("Eliminar");
        click_eliminar_dhcp_network.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_eliminar_dhcp_networkActionPerformed(evt);
            }
        });
        dhcpNetworkPop.add(click_eliminar_dhcp_network);

        setClosable(true);
        setIconifiable(true);
        setTitle("Address List");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta"));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/perno-circular-del-tapon.png"))); // NOI18N
        jButton2.setText("Conectar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Microtik");

        jLabel1.setText("Username");

        entryUsername.setEditable(false);

        jLabel2.setText("Password");

        entryPassword.setEditable(false);

        jLabel3.setText("Host");

        entryHost.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(entryUsername)
                            .addComponent(entryHost))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPassword)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel7)
                    .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(entryUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(entryPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entryHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Interfaces"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Type", "Mac Addres"
            }
        ));
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Direcciones"));

        jLabel4.setText("Address");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/flecha-derecha.png"))); // NOI18N

        jLabel6.setText("Interfaz");

        entryInterfaz.setEditable(false);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/caja.png"))); // NOI18N
        jButton1.setText("Aplicar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entryAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryInterfaz)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(entryAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(entryInterfaz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));

        tablaAdress.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Address", "Network", "Interface"
            }
        ));
        tablaAdress.setComponentPopupMenu(jPopupMenu1);
        tablaAdress.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(tablaAdress);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Address List", jPanel4);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Pool List"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Range"
            }
        ));
        jTable2.setComponentPopupMenu(jPopupMenu2);
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMinWidth(50);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pool Ip", jPanel6);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("DHCP Network"));

        dhcp_tabla_chida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Address", "Gateway", "DNS"
            }
        ));
        dhcp_tabla_chida.setComponentPopupMenu(popDHCP);
        jScrollPane4.setViewportView(dhcp_tabla_chida);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(1, 1, 1)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 409, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("DHCP", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String microtikSelect = (String) comboMicrotik.getSelectedItem();
        if (microtikSelect == null) {
            JOptionPane.showMessageDialog(null, "Por favor selecciona el microtik a realizar configuracion. Si no aparecen, registra uno");
        } else {
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();
            String sql = "SELECT ip, username, password FROM credenciales_microtik WHERE nombre = ? LIMIT 1";
            if (cn != null) {
                PreparedStatement cursor;
                ResultSet resultado;
                try {
                    cursor = cn.prepareStatement(sql);
                    cursor.setString(1, microtikSelect);

                    resultado = cursor.executeQuery();

                    if (resultado.next()) {
                        String ip = resultado.getString("ip");
                        String username = resultado.getString("username");
                        String password = resultado.getString("password");

                        entryHost.setText(ip);
                        entryUsername.setText(username);
                        entryPassword.setText(password);
                        interfacesList(username, password, ip);
                        addresList(username, password, ip);
                        poolList(username, password, ip);
                        dhcpServerList(username, password, ip);
                        dhcpNetwork(username, password, ip);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Problemas con la consulta del microtik: " + e, "SpiderNET", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1AncestorAdded

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int rows = jTable1.getSelectedRow();
        if(rows >=0){
            String interfaceName = (String)jTable1.getValueAt(rows, 0);
            entryInterfaz.setText(interfaceName);
        }else{
            JOptionPane.showMessageDialog(null, "Selecciona primero una interfaz");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        String addres = entryAddress.getText();
        String interfaz = entryInterfaz.getText();
        if(user.isBlank() && password.isBlank() && host.isBlank() && addres.isBlank() && interfaz.isBlank()){
            JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios!");
        }else{
            addres = addres + "/24"; //agregamos a la ip el segmento /24
            
            simpleQueue queue = new simpleQueue();
            queue.addresList(addres, interfaz, user, password, host); //creamos una addres list
            addresList(user, password, host); //cargamos la table
            String rango = getIPRange(interfaz, addres); //llamamos a la funcion que recibe nombre y addres anterior
            queue.poolRange(interfaz, rango, user, password, host); //crea la pool con el nombre y rango generado aneriormente
            poolList(user, password, host);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void entryNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryNetworkActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText(); 
        int seleccionado = tablaAdress.getSelectedRow();
        String network = (String)tablaAdress.getValueAt(seleccionado, 2);
        
        if(network.isBlank()){
            JOptionPane.showMessageDialog(null, "No podemos agregar esta network porque esta vacia");
        }else{
            //(String address, String gtw, String dns, String user, String password, String host)
            String address =  network + "/24";
            String gtw = calcularPuertaDeEnlace(network);
            String dns = "8.8.8.8";
            simpleQueue queue = new simpleQueue();
            queue.serverDHCP(address, gtw, dns, user, password, host);
            dhcpNetwork(user, password, host);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_entryNetworkActionPerformed

    private void click_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_eliminarActionPerformed
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        int rows = tablaAdress.getSelectedRow();
        if(rows>=0){
            String id = (String)tablaAdress.getValueAt(rows, 0);
            deleteSimple s = new deleteSimple();
            s.eliminarAddres(id, user, password, host);
            addresList(user, password, host);
        }else{
            JOptionPane.showMessageDialog(null, "Primero selecciona una address de la tabla");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_click_eliminarActionPerformed

    private void click_eliminar_poolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_eliminar_poolActionPerformed
       String user = entryUsername.getText();
       String password = entryPassword.getText();
       String host = entryHost.getText();        // TODO add your handling code here:
       int rows = jTable2.getSelectedRow();
       if(rows >=0){
           String id = (String)jTable2.getValueAt(rows, 0);
           deleteSimple s = new deleteSimple();
           s.eliminarPooln(id, user, password, host);
           poolList(user, password, host);
       }

        // TODO add your handling code here:
    }//GEN-LAST:event_click_eliminar_poolActionPerformed

    private void click_dhcp_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_dhcp_serverActionPerformed
       String user = entryUsername.getText();
       String password = entryPassword.getText();
       String host = entryHost.getText();  
       int seleccionado = tablaAdress.getSelectedRow();
       
       if(seleccionado>=0){
           //(String name, String interfaz, String pool, String user, String password, String host
           String name = (String)tablaAdress.getValueAt(seleccionado, 3);
           String interfaces =(String) tablaAdress.getValueAt(seleccionado, 3);
           String pool =(String) tablaAdress.getValueAt(seleccionado, 3);
           String comentario;
           comentario = JOptionPane.showInputDialog(null, "Comentario para el DHCP Server?", "SpiderNET", JOptionPane.INFORMATION_MESSAGE);

           comentario = comentario.trim();
           comentario = comentario.replaceAll("[^a-zA-Z0-9]", "");
           
           simpleQueue queue = new simpleQueue();
           queue.asignacionDHCP(name, interfaces, pool, user, password, host, comentario);
           dhcpServerList(user, password, host);
       }

        // TODO add your handling code here:
    }//GEN-LAST:event_click_dhcp_serverActionPerformed

    private void click_eliminar_dhcp_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_eliminar_dhcp_serverActionPerformed
        int rows = dhcp_tabla_chida.getSelectedRow();
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        if(rows >=0){
            String id = (String)dhcp_tabla_chida.getValueAt(rows, 0);
            simpleQueue queue = new simpleQueue();
            queue.eliminarDhcp(id, user, password, host);
            dhcpServerList(user, password, host);
        }else{
            JOptionPane.showMessageDialog(null, "Primero selecciona un DHCP de la lista", "SpiderNET", JOptionPane.WARNING_MESSAGE);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_click_eliminar_dhcp_serverActionPerformed

    private void click_disableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_disableActionPerformed
        int rows = dhcp_tabla_chida.getSelectedRow();
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        if(rows >=0){
            String id = (String)dhcp_tabla_chida.getValueAt(rows, 0);
            simpleQueue queue = new simpleQueue();
            queue.desabilitarDHCP(id, user, password, host);
            dhcpServerList(user, password, host);
        }else{
            JOptionPane.showMessageDialog(null, "Primero selecciona un DHCP de la lista", "SpiderNET", JOptionPane.WARNING_MESSAGE);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_click_disableActionPerformed

    private void click_enableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_enableActionPerformed
        int rows = dhcp_tabla_chida.getSelectedRow();
        String user = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        if(rows >=0){
            String id = (String)dhcp_tabla_chida.getValueAt(rows, 0);
            simpleQueue queue = new simpleQueue();
            queue.habilitarDhcp(id, user, password, host);
            dhcpServerList(user, password, host);
        }else{
            JOptionPane.showMessageDialog(null, "Primero selecciona un DHCP de la lista", "SpiderNET", JOptionPane.WARNING_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_click_enableActionPerformed

    private void click_eliminar_dhcp_networkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_eliminar_dhcp_networkActionPerformed
//         int rows = jTable4.getSelectedRow();
//        String user = entryUsername.getText();
//        String password = entryPassword.getText();
//        String host = entryHost.getText();
//        if(rows >=0){
//            String id = (String)jTable4.getValueAt(rows, 0);
//            simpleQueue queue = new simpleQueue();
//            queue.eliminarNetwork(id, user, password, host);
//            dhcpNetwork(user, password, host);
//        }else{
//            JOptionPane.showMessageDialog(null, "Primero selecciona un DHCP de la lista", "SpiderNET", JOptionPane.WARNING_MESSAGE);
//        }        // TODO add your handling code here:
    }//GEN-LAST:event_click_eliminar_dhcp_networkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem click_dhcp_server;
    private javax.swing.JMenuItem click_disable;
    private javax.swing.JMenuItem click_eliminar;
    private javax.swing.JMenuItem click_eliminar_dhcp_network;
    private javax.swing.JMenuItem click_eliminar_dhcp_server;
    private javax.swing.JMenuItem click_eliminar_pool;
    private javax.swing.JMenuItem click_enable;
    private javax.swing.JComboBox<String> comboMicrotik;
    private javax.swing.JPopupMenu dhcpNetworkPop;
    private javax.swing.JTable dhcp_tabla_chida;
    private javax.swing.JTextField entryAddress;
    private javax.swing.JTextField entryHost;
    private javax.swing.JTextField entryInterfaz;
    private javax.swing.JMenuItem entryNetwork;
    private javax.swing.JTextField entryPassword;
    private javax.swing.JTextField entryUsername;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JPopupMenu popDHCP;
    private javax.swing.JTable tablaAdress;
    // End of variables declaration//GEN-END:variables
   
    public void listarMicrotik() {
        Consultas consultas = new Consultas();
        ArrayList<String> nombreMicrotik = consultas.nombresMicrotiks();
        for (String microtiks : nombreMicrotik) {
            comboMicrotik.addItem(microtiks);
        }
    }
    
    public void interfacesList(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/interface/print ");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[3];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get("name");
                clientesDhcpLeases[1] = result.get("type");
                clientesDhcpLeases[2] = result.get("mac-address");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            jTable1.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

        
    public void addresList(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ip/address/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tablaAdress.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[4];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get(".id");
                clientesDhcpLeases[1] = result.get("address");
                clientesDhcpLeases[2] = result.get("network");
                clientesDhcpLeases[3] = result.get("interface");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            tablaAdress.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static String getIPRange(String interfaceName, String address) {
        try {
            // Separar la IP de la máscara
            String[] parts = address.split("/");
            String ipBase = parts[0];
            int prefix = Integer.parseInt(parts[1]);

            // Convertir la IP en un array de bytes
            InetAddress inet = InetAddress.getByName(ipBase);
            byte[] ipBytes = inet.getAddress();

            // Calcular la dirección de red
            int subnetMask = 0xFFFFFFFF << (32 - prefix);
            int ipInt = ((ipBytes[0] & 0xFF) << 24) | ((ipBytes[1] & 0xFF) << 16) |
                        ((ipBytes[2] & 0xFF) << 8) | (ipBytes[3] & 0xFF);
            int networkAddress = ipInt & subnetMask;
            
            // Calcular la IP inicial y final del rango
            int startIP = networkAddress + 1;  // Primera IP útil
            int endIP = (networkAddress | ~subnetMask) - 1;  // Última IP útil

            // Convertir las IPs de nuevo a formato String
            String startIPStr = intToIP(startIP + 1); // +1 porque la primera IP útil es el gateway
            String endIPStr = intToIP(endIP);

            return startIPStr + "-" + endIPStr;

        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static String intToIP(int ip) {
        return ((ip >> 24) & 0xFF) + "." +
               ((ip >> 16) & 0xFF) + "." +
               ((ip >> 8) & 0xFF) + "." +
               (ip & 0xFF);
    }
    public void poolList(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ip/pool/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[3];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get(".id");
                clientesDhcpLeases[1] = result.get("name");
                clientesDhcpLeases[2] = result.get("ranges");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            jTable2.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }
    public static String calcularPuertaDeEnlace(String network) {
        try {
            // Dividir la IP en sus octetos
            String[] octetos = network.split("\\.");
            
            // Asegurar que la IP tiene 4 octetos
            if (octetos.length != 4) {
                throw new IllegalArgumentException("Dirección de red no válida");
            }
            
            // Reemplazar el último octeto con '1' para obtener la puerta de enlace
            return octetos[0] + "." + octetos[1] + "." + octetos[2] + ".1";
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
    public void dhcpServerList(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ip/dhcp-server/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) dhcp_tabla_chida.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[4];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get(".id");
                clientesDhcpLeases[1] = result.get("name");
                clientesDhcpLeases[2] = result.get("interface");
                clientesDhcpLeases[3] = result.get("address-pool");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            dhcp_tabla_chida.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void dhcpNetwork(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ip/dhcp-server/network/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) dhcp_tabla_chida.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[4];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get(".id");
                clientesDhcpLeases[1] = result.get("address");
                clientesDhcpLeases[2] = result.get("gateway");
                clientesDhcpLeases[3] = result.get("dns-server");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            dhcp_tabla_chida.setModel(modelo);

            // Cerrar la conexión con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepción
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }    
}
