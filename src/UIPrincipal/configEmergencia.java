/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UIPrincipal;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import Config.Conexion;
import java.sql.Connection;
import java.sql.Statement;

/**
 *
 * @author ricardo
 */
public class configEmergencia extends javax.swing.JFrame {

    /**
     * Creates new form configEmergencia
     */
    public configEmergencia() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/img/arana.png")).getImage());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        entryHost = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        entryPort = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        entryDatabase = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        entryUser = new javax.swing.JTextField();
        entryPassword = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuracion Inicial");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos tecnicos"));

        jLabel3.setText("Host");

        entryHost.setText("localhost");
        entryHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryHostActionPerformed(evt);
            }
        });

        jLabel4.setText("Port");

        entryPort.setText("3306");

        jLabel5.setText("Database");

        entryDatabase.setText("spidernet");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/flecha-de-circulo-de-disquete-a-la-derecha.png"))); // NOI18N
        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/circulo-cruzado.png"))); // NOI18N
        jButton2.setText("Cerrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entryDatabase))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryHost, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPort, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(entryHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(entryPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entryDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta de usuario"));

        jLabel8.setText("User");

        jLabel9.setText("Password");

        entryUser.setText("root");

        entryPassword.setText("spidernet");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(entryUser, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPassword)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(entryUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(entryPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        almacenarDatos();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void entryHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entryHostActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(configEmergencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(configEmergencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(configEmergencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(configEmergencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new configEmergencia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField entryDatabase;
    private javax.swing.JTextField entryHost;
    private javax.swing.JTextField entryPassword;
    private javax.swing.JTextField entryPort;
    private javax.swing.JTextField entryUser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    public void almacenarDatos() {
        String host = entryHost.getText();
        String port = entryPort.getText();
        String database = entryDatabase.getText();
        String user = entryUser.getText();
        String password = entryPassword.getText();

        Properties properties = new Properties();
        properties.setProperty("db.host", host);
        properties.setProperty("db.port", port);
        properties.setProperty("db.database", database);
        properties.setProperty("db.user", user);
        properties.setProperty("db.password", password);

        try (FileOutputStream output = new FileOutputStream("config.properties")) {
            properties.store(output, "Configuración de conexión a la base de datos");
            JOptionPane.showMessageDialog(null, "Datos almacenados, ahora crea la base de datos");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar la configuración: " + e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

public void ejecutarScript() {
    Conexion conexion = new Conexion();
    Connection cn = conexion.getConnection();

    if (cn != null) {
        try {
            Statement stmt = cn.createStatement();
            
            String sqlScript = """
                CREATE DATABASE IF NOT EXISTS setup;
                USE setup;

                CREATE TABLE IF NOT EXISTS antenasap (
                    idantenasAp INT NOT NULL AUTO_INCREMENT,
                    nombre VARCHAR(100) DEFAULT NULL,
                    modelo VARCHAR(100) DEFAULT NULL,
                    usuario VARCHAR(100) DEFAULT NULL,
                    password VARCHAR(100) DEFAULT NULL,
                    ip VARCHAR(100) DEFAULT NULL,
                    PRIMARY KEY (idantenasAp)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                --
                -- Table structure for table `clientes`
                --

                DROP TABLE IF EXISTS `clientes`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `clientes` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `nombre` varchar(100) NOT NULL,
                  `telefono` varchar(20) DEFAULT NULL,
                  `email` varchar(100) DEFAULT NULL,
                  `direccion` text NOT NULL,
                  `fecha_registro` datetime DEFAULT CURRENT_TIMESTAMP,
                  `id_paquete` int DEFAULT NULL,
                  `ip_cliente` varchar(100) DEFAULT NULL,
                  `dia_corte` int DEFAULT NULL,
                  `estado` enum('Activo','Bloqueado','Suspendido','Cancelado') DEFAULT NULL,
                  `ap_antena` varchar(100) DEFAULT NULL,
                  `serviciosTV` varchar(100) DEFAULT NULL,
                  `serviciosPlataformas` varchar(100) DEFAULT NULL,
                  `id_antena_ap` int DEFAULT NULL,
                  `id_servicio_plataforma` int DEFAULT NULL,
                  `id_microtik` int NOT NULL,
                  PRIMARY KEY (`id`),
                  KEY `id_servicio_plataforma` (`id_servicio_plataforma`),
                  KEY `id_paquete` (`id_microtik`),
                  KEY `clientes_antenasap` (`id_antena_ap`),
                  KEY `clientes_paquetes_idx` (`id_paquete`),
                  CONSTRAINT `clientes_credenciales` FOREIGN KEY (`id_microtik`) REFERENCES `credenciales_microtik` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `clientes_ibfk_2` FOREIGN KEY (`id_antena_ap`) REFERENCES `antenasap` (`idantenasAp`) ON DELETE SET NULL,
                  CONSTRAINT `clientes_ibfk_3` FOREIGN KEY (`id_servicio_plataforma`) REFERENCES `serviciosplataforma` (`idPlataformas`) ON DELETE SET NULL,
                  CONSTRAINT `clientes_paquetes` FOREIGN KEY (`id_paquete`) REFERENCES `paquetes` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `credenciales_microtik`
                --

                DROP TABLE IF EXISTS `credenciales_microtik`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `credenciales_microtik` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `nombre` varchar(100) NOT NULL,
                  `ip` varchar(100) DEFAULT NULL,
                  `username` varchar(100) NOT NULL,
                  `password` varchar(100) DEFAULT NULL,
                  PRIMARY KEY (`id`)
                ) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `datosEmpresa`
                --

                DROP TABLE IF EXISTS `datosEmpresa`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `datosEmpresa` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `nombreWisp` varchar(100) DEFAULT NULL,
                  `cp` varchar(30) DEFAULT NULL,
                  `telefono` varchar(100) DEFAULT NULL,
                  `rfc` varchar(100) DEFAULT NULL,
                  `direccion` varchar(100) DEFAULT NULL,
                  PRIMARY KEY (`id`)
                ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `equipos`
                --

                DROP TABLE IF EXISTS `equipos`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `equipos` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `nombre` varchar(100) NOT NULL,
                  `tipo` enum('Router','Antena','ONU','Otro') NOT NULL,
                  `marca` varchar(50) DEFAULT NULL,
                  `modelo` varchar(50) DEFAULT NULL,
                  `mac` varchar(50) DEFAULT NULL,
                  `serial` varchar(50) DEFAULT NULL,
                  `estado` enum('Rentado','Vendido','Propio','Almacenado') NOT NULL,
                  `id_cliente` int DEFAULT NULL,
                  `fecha_registro` datetime DEFAULT CURRENT_TIMESTAMP,
                  PRIMARY KEY (`id`),
                  KEY `id_cliente` (`id_cliente`),
                  CONSTRAINT `equipos_ibfk_1` FOREIGN KEY (`id_cliente`) REFERENCES `clientes` (`id`) ON DELETE SET NULL
                ) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `fallas`
                --

                DROP TABLE IF EXISTS `fallas`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `fallas` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `id_cliente` int NOT NULL,
                  `tipo_falla` enum('Sin conexión','Intermitencia','Baja velocidad','Otros') NOT NULL,
                  `descripcion` text NOT NULL,
                  `estado` tinyint NOT NULL DEFAULT '0',
                  `fecha_reporte` datetime DEFAULT CURRENT_TIMESTAMP,
                  `fecha_reparacion` datetime DEFAULT NULL,
                  `id_tecnico` int DEFAULT NULL,
                  PRIMARY KEY (`id`),
                  KEY `id_cliente` (`id_cliente`),
                  KEY `id_tecnico` (`id_tecnico`),
                  CONSTRAINT `fallas_ibfk_1` FOREIGN KEY (`id_cliente`) REFERENCES `clientes` (`id`) ON DELETE CASCADE,
                  CONSTRAINT `fallas_ibfk_2` FOREIGN KEY (`id_tecnico`) REFERENCES `usuarios` (`id`) ON DELETE SET NULL,
                  CONSTRAINT `fallas_chk_1` CHECK ((`estado` in (0,1,2)))
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `pagos`
                --

                DROP TABLE IF EXISTS `pagos`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `pagos` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `id_cliente` int NOT NULL,
                  `nombre` varchar(255) DEFAULT NULL,
                  `monto` decimal(10,2) NOT NULL,
                  `fecha_pago` datetime DEFAULT CURRENT_TIMESTAMP,
                  `metodo_pago` enum('Efectivo','Transferencia','Tarjeta') NOT NULL,
                  `cantidad` int NOT NULL,
                  `cambio` int NOT NULL,
                  PRIMARY KEY (`id`),
                  KEY `id_cliente` (`id_cliente`),
                  CONSTRAINT `pagos_ibfk_1` FOREIGN KEY (`id_cliente`) REFERENCES `clientes` (`id`) ON DELETE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `paquetes`
                --

                DROP TABLE IF EXISTS `paquetes`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `paquetes` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `nombre` varchar(100) NOT NULL,
                  `velocidad` varchar(50) NOT NULL,
                  `precio` decimal(10,2) NOT NULL,
                  PRIMARY KEY (`id`)
                ) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `serviciosplataforma`
                --

                DROP TABLE IF EXISTS `serviciosplataforma`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `serviciosplataforma` (
                  `idPlataformas` int NOT NULL AUTO_INCREMENT,
                  `nombre` varchar(100) DEFAULT NULL,
                  `descripcion` varchar(100) DEFAULT NULL,
                  `precio` varchar(100) DEFAULT NULL,
                  PRIMARY KEY (`idPlataformas`)
                ) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `tickets`
                --

                DROP TABLE IF EXISTS `tickets`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `tickets` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `id_cliente` int NOT NULL,
                  `categoria` enum('Soporte técnico','Facturación','Instalación','Otro') NOT NULL,
                  `descripcion` text NOT NULL,
                  `estado` enum('Pendiente','En proceso','Resuelto','Cerrado') DEFAULT 'Pendiente',
                  `fecha_creacion` datetime DEFAULT CURRENT_TIMESTAMP,
                  `fecha_cierre` datetime DEFAULT NULL,
                  `id_responsable` int DEFAULT NULL,
                  PRIMARY KEY (`id`),
                  KEY `id_cliente` (`id_cliente`),
                  KEY `id_responsable` (`id_responsable`),
                  CONSTRAINT `tickets_ibfk_1` FOREIGN KEY (`id_cliente`) REFERENCES `clientes` (`id`) ON DELETE CASCADE,
                  CONSTRAINT `tickets_ibfk_2` FOREIGN KEY (`id_responsable`) REFERENCES `usuarios` (`id`) ON DELETE SET NULL
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                /*!40101 SET character_set_client = @saved_cs_client */;

                --
                -- Table structure for table `usuarios`
                --

                DROP TABLE IF EXISTS `usuarios`;
                /*!40101 SET @saved_cs_client     = @@character_set_client */;
                /*!50503 SET character_set_client = utf8mb4 */;
                CREATE TABLE `usuarios` (
                  `id` int NOT NULL AUTO_INCREMENT,
                  `nombre` varchar(100) NOT NULL,
                  `usuario` varchar(50) NOT NULL,
                  `password` varchar(255) NOT NULL,
                  `rol` tinyint NOT NULL,
                  PRIMARY KEY (`id`),
                  UNIQUE KEY `usuario` (`usuario`),
                  CONSTRAINT `usuarios_chk_1` CHECK ((`rol` in (0,1,2)))
                ) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                INSERT INTO usuarios (nombre, usuario, password, rol) VALUES ("spidernet", "spidernet", "spidernet123", 0);

                -- Agrega más sentencias aquí...
            """;

            // Divide el script por ";"
            String[] comandos = sqlScript.split(";");

            for (String sql : comandos) {
                sql = sql.trim();
                if (!sql.isEmpty()) {
                    stmt.execute(sql);
                }
            }

            JOptionPane.showMessageDialog(null, "Base de datos generada correctamente", "SpiderNET", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Error al ejecutar el script: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Error de conexión con la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

}
