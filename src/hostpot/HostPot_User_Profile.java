/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package hostpot;

import Config.Conexion;
import Config.Consultas;
import Config.DeleteDatos;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import me.legrange.mikrotik.ApiConnection;
import me.legrange.mikrotik.MikrotikApiException;
/**
 *
 * @author ricardo
 */
public class HostPot_User_Profile extends javax.swing.JInternalFrame {

    /**
     * Creates new form HostPot_User_Profile
     */
    public HostPot_User_Profile() {
        initComponents();
        listarMicrotik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        comboMicrotik = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        entryUsername1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        entryPassword1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        entryHost1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        entryNombreProfile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        comboAddressPool = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        entrySharedUser = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        entryLimitVelocidad = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        jMenuItem1.setText("Eliminar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setTitle("Profile User Profile");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/perno-circular-del-tapon.png"))); // NOI18N
        jButton3.setText("Conectar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Microtik");

        jLabel4.setText("Username");

        entryUsername1.setEditable(false);

        jLabel5.setText("Password");

        entryPassword1.setEditable(false);

        jLabel6.setText("Host");

        entryHost1.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(entryUsername1)
                            .addComponent(entryHost1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPassword1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel9)
                    .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(entryUsername1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(entryPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entryHost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Nombre Perfil");

        jLabel2.setText("Address Pool");

        jLabel3.setText("Shared User");

        entrySharedUser.setText("1");

        jLabel7.setText("Limit RX/TX");

        entryLimitVelocidad.setText("5M/5M");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ajustes.png"))); // NOI18N
        jButton1.setText("Aplicar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Limite", "Usuarios simultaneos"
            }
        ));
        jTable1.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(entryNombreProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(entrySharedUser)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboAddressPool, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(entryLimitVelocidad))))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(entryNombreProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboAddressPool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(entrySharedUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(entryLimitVelocidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String microtikSelect = (String) comboMicrotik.getSelectedItem();
        if (microtikSelect == null) {
            JOptionPane.showMessageDialog(null, "Por favor selecciona el microtik a realizar configuracion. Si no aparecen, registra uno");
        } else {
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();
            String sql = "SELECT ip, username, password FROM credenciales_microtik WHERE nombre = ? LIMIT 1";
            if (cn != null) {
                PreparedStatement cursor;
                ResultSet resultado;
                try {
                    cursor = cn.prepareStatement(sql);
                    cursor.setString(1, microtikSelect);

                    resultado = cursor.executeQuery();

                    if (resultado.next()) {
                        String ip = resultado.getString("ip");
                        String username = resultado.getString("username");
                        String password = resultado.getString("password");

                        entryHost1.setText(ip);
                        entryUsername1.setText(username);
                        entryPassword1.setText(password);
                        cargarUserProfilesHotspot(username, password, ip);
                        cargarAddressPools(username, password, ip);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Problemas con la consulta del microtik: " + e, "SpiderNET", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String username = entryUsername1.getText();
        String password = entryPassword1.getText();
        String host = entryHost1.getText();
        crearUserProfileHotspot(username, password, host);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int filaSeleccionada;
        try {
            filaSeleccionada = jTable1.getSelectedRow();

            if (filaSeleccionada >= 0) {
                String nompreProfile = (String)jTable1.getValueAt(filaSeleccionada, 0);
                String username = entryUsername1.getText();
                String password = entryPassword1.getText();
                String host = entryHost1.getText();
                eliminarUserProfileHotspot(username, password, host, nompreProfile);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Para eliminar un cliente, primero seleccionelo", "SpiderNET", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboAddressPool;
    private javax.swing.JComboBox<String> comboMicrotik;
    private javax.swing.JTextField entryHost1;
    private javax.swing.JTextField entryLimitVelocidad;
    private javax.swing.JTextField entryNombreProfile;
    private javax.swing.JTextField entryPassword1;
    private javax.swing.JTextField entrySharedUser;
    private javax.swing.JTextField entryUsername1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void listarMicrotik() {
        Consultas consultas = new Consultas();
        ArrayList<String> nombreMicrotik = consultas.nombresMicrotiks();
        for (String microtiks : nombreMicrotik) {
            comboMicrotik.addItem(microtiks);
        }
    }
    
    public void cargarUserProfilesHotspot(String username, String password, String host) {
        try {
            ApiConnection con = ApiConnection.connect(host);
            con.login(username, password);

            // Ejecutar comando
            List<Map<String, String>> results = con.execute("/ip/hotspot/user/profile/print");

            // Preparar modelo de tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Nombre");
            modelo.addColumn("Velocidad");
            modelo.addColumn("Usuarios Simultáneos");

            // Agregar filas
            for (Map<String, String> profile : results) {
                String nombre = profile.getOrDefault("name", "N/A");
                String velocidad = profile.getOrDefault("rate-limit", "Sin límite");
                String shared = profile.getOrDefault("shared-users", "1");

                modelo.addRow(new Object[]{nombre, velocidad, shared});
            }

            // Cargar modelo en tabla
            jTable1.setModel(modelo);

            con.close();
        } catch (MikrotikApiException e) {
            JOptionPane.showMessageDialog(null, "❌ Error al obtener perfiles: " + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void cargarAddressPools(String username, String password, String host) {
        try {
            ApiConnection con = ApiConnection.connect(host);
            con.login(username, password);

            // Ejecutar el comando para obtener los pools
            List<Map<String, String>> results = con.execute("/ip/pool/print");

            // Limpiar el combo box antes de llenarlo
            comboAddressPool.removeAllItems();

            // Agregar cada nombre de pool al combo
            for (Map<String, String> pool : results) {
                String poolName = pool.get("name");
                if (poolName != null && !poolName.isEmpty()) {
                    comboAddressPool.addItem(poolName);
                }
            }

            con.close();
        } catch (MikrotikApiException e) {
            JOptionPane.showMessageDialog(null, "❌ Error al obtener address pools: " + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void crearUserProfileHotspot(String username, String password, String host) {
        String nombreProfile = entryNombreProfile.getText().trim();
        String addressPool = (String) comboAddressPool.getSelectedItem();
        String sharedUser = entrySharedUser.getText().trim();
        String rateLimit = entryLimitVelocidad.getText().trim();

        // Validación básica
        if (nombreProfile.isEmpty() || addressPool == null || sharedUser.isEmpty() || rateLimit.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Completa todos los campos para crear el perfil", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        new Thread(() -> {
            try {
                ApiConnection con = ApiConnection.connect(host);
                con.login(username, password);

                // Armar el comando
                String comando = String.format(
                    "/ip/hotspot/user/profile/add name=\"%s\" address-pool=\"%s\" shared-users=%s rate-limit=\"%s\"",
                    nombreProfile, addressPool, sharedUser, rateLimit
                );

                // Ejecutar en el router
                con.execute(comando);
                con.close();

                JOptionPane.showMessageDialog(null, "✅ Perfil creado correctamente en MikroTik", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (MikrotikApiException e) {
                JOptionPane.showMessageDialog(null, "❌ Error al crear perfil: " + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }
    
    public void eliminarUserProfileHotspot(String username, String password, String host, String nombreProfile) {
        if (nombreProfile == null || nombreProfile.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El nombre del perfil no puede estar vacío", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        new Thread(() -> {
            try {
                ApiConnection con = ApiConnection.connect(host);
                con.login(username, password);

                // 1. Buscar el ID del perfil con ese nombre
                List<Map<String, String>> perfiles = con.execute("/ip/hotspot/user/profile/print");
                String idPerfil = null;

                for (Map<String, String> perfil : perfiles) {
                    if (nombreProfile.equals(perfil.get("name"))) {
                        idPerfil = perfil.get(".id");
                        break;
                    }
                }

                if (idPerfil == null) {
                    JOptionPane.showMessageDialog(null, "❌ Perfil no encontrado", "Error", JOptionPane.WARNING_MESSAGE);
                    con.close();
                    return;
                }

                // 2. Ejecutar la eliminación por ID
                con.execute(String.format("/ip/hotspot/user/profile/remove .id=%s", idPerfil));

                con.close();
                JOptionPane.showMessageDialog(null, "✅ Perfil eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (MikrotikApiException e) {
                JOptionPane.showMessageDialog(null, "❌ Error al eliminar perfil: " + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }



}
