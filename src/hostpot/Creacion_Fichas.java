/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package hostpot;

import Config.Conexion;
import Config.Consultas;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.table.DefaultTableModel;
import me.legrange.mikrotik.ApiConnection;
import me.legrange.mikrotik.MikrotikApiException;
import me.legrange.mikrotik.ResultListener;

import com.lowagie.text.*;
import com.lowagie.text.pdf.*;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Locale;

/**
 *
 * @author ricardo
 */
public class Creacion_Fichas extends javax.swing.JInternalFrame {

    /**
     * Creates new form Creacion_Fichas
     */
    public Creacion_Fichas() {
        initComponents();
        listarMicrotik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        clic_eliminar = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        comboMicrotik = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        entryUsername1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        entryPassword1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        entryHost1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        barraProgreso1 = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        entryTime = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        entryCantidadUsuarios = new javax.swing.JTextField();
        comboServer = new javax.swing.JComboBox<>();
        comboProfile = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaUsuariosActivos = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        btn_conectar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        clic_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        clic_eliminar.setText("Remove");
        clic_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clic_eliminarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(clic_eliminar);

        setClosable(true);
        setTitle("Fichas HostPot");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/perno-circular-del-tapon.png"))); // NOI18N
        jButton3.setText("Conectar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Microtik");

        jLabel4.setText("Username");

        entryUsername1.setEditable(false);

        jLabel5.setText("Password");

        entryPassword1.setEditable(false);

        jLabel6.setText("Host");

        entryHost1.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(entryUsername1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addComponent(entryHost1)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPassword1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel9)
                    .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(entryUsername1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(entryPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entryHost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/neo6.png"))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Server");

        jLabel2.setText("Profile");

        jLabel3.setText("Limite:");

        entryTime.setText("00:05:00");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/almuerzo-cohete.png"))); // NOI18N
        jButton1.setText("Generar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Cantidad Usuarios");

        entryCantidadUsuarios.setText("20");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entryCantidadUsuarios))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(comboServer, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(comboProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryTime, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(entryTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel8)
                    .addComponent(entryCantidadUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario", "Contraseña", "Server", "", "Tiempo Vida"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(3).setHeaderValue("");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("Tiempo Vida");
        }

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/equipo-de-usuario.png"))); // NOI18N
        jButton2.setText("Cargar en MikroTik");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tickets", jPanel4);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText(":foreach i in=[/ip/hotspot/user/find] do={\n    :local limit [/ip/hotspot/user/get $i limit-uptime];\n    :local actual [/ip/hotspot/user/get $i uptime];\n    :if ($limit != \"\") do={\n        :if ($actual >= $limit) do={\n            /ip/hotspot/user/remove $i;\n        }\n    }\n}\n");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Script", jPanel5);

        tablaUsuariosActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario", "Direccion", "Tiempo de vida"
            }
        ));
        tablaUsuariosActivos.setComponentPopupMenu(jPopupMenu1);
        jScrollPane3.setViewportView(tablaUsuariosActivos);

        jTextField2.setText("Nombre de usuario para buscar");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/busqueda.png"))); // NOI18N
        jButton4.setText("Buscar!");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btn_conectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bloquear-hashtag.png"))); // NOI18N
        btn_conectar.setText("Conectar");
        btn_conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_conectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_conectar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(183, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(btn_conectar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Usuarios Activos", jPanel6);

        jMenu1.setText("Cargar Script");

        jMenuItem1.setText("Cargar Script");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(barraProgreso1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel7)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(barraProgreso1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String microtikSelect = (String) comboMicrotik.getSelectedItem();
        if (microtikSelect == null) {
            JOptionPane.showMessageDialog(null, "Por favor selecciona el microtik a realizar configuracion. Si no aparecen, registra uno");
        } else {
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();
            String sql = "SELECT ip, username, password FROM credenciales_microtik WHERE nombre = ? LIMIT 1";
            if (cn != null) {
                PreparedStatement cursor;
                ResultSet resultado;
                try {
                    cursor = cn.prepareStatement(sql);
                    cursor.setString(1, microtikSelect);

                    resultado = cursor.executeQuery();

                    if (resultado.next()) {
                        String ip = resultado.getString("ip");
                        String username = resultado.getString("username");
                        String password = resultado.getString("password");

                        entryHost1.setText(ip);
                        entryUsername1.setText(username);
                        entryPassword1.setText(password);
                        remoteAddres(username, password, ip);
                        obtenerUserProfiles(username, password, ip);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Problemas con la consulta del microtik: " + e, "SpiderNET", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        creacionUsuariosRandom();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String username = entryUsername1.getText().trim();
        String password = entryPassword1.getText().trim();
        String host = entryHost1.getText().trim();

// Validar campos
        if (username.isEmpty() || password.isEmpty() || host.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, completa todos los datos de conexión (usuario, contraseña y host).", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

// Validar que la tabla tenga datos
        if (jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay usuarios para enviar. Primero genera usuarios.", "Tabla vacía", JOptionPane.WARNING_MESSAGE);
            return;
        }

// Ejecutar el método
        enviarUsuariosAMikrotik(username, password, host);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String user = entryUsername1.getText().trim();
        String pass = entryPassword1.getText().trim();
        String host = entryHost1.getText().trim();

// Validar campos
        if (user.isEmpty() || pass.isEmpty() || host.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, completa todos los datos de conexión (usuario, contraseña y host).", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }


        crearSchedulerLimpieza(user, pass, host);
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btn_conectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_conectarActionPerformed
        String user = entryUsername1.getText().trim();
        String pass = entryPassword1.getText().trim();
        String host = entryHost1.getText().trim();

// Validar campos
        if (user.isEmpty() || pass.isEmpty() || host.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, completa todos los datos de conexión (usuario, contraseña y host).", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        cargarUsuariosActivos(user, pass, host);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_conectarActionPerformed

    private void clic_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clic_eliminarActionPerformed
        String user = entryUsername1.getText().trim();
        String pass = entryPassword1.getText().trim();
        String host = entryHost1.getText().trim();

// Validar campos
        if (user.isEmpty() || pass.isEmpty() || host.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, completa todos los datos de conexión (usuario, contraseña y host).", "Campos vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        eliminarUsuarioActivo(user, pass, host);
        // TODO add your handling code here:
    }//GEN-LAST:event_clic_eliminarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        buscarUsuarioEnTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgreso1;
    private javax.swing.JButton btn_conectar;
    private javax.swing.JMenuItem clic_eliminar;
    private javax.swing.JComboBox<String> comboMicrotik;
    private javax.swing.JComboBox<String> comboProfile;
    private javax.swing.JComboBox<String> comboServer;
    private javax.swing.JTextField entryCantidadUsuarios;
    private javax.swing.JTextField entryHost1;
    private javax.swing.JTextField entryPassword1;
    private javax.swing.JTextField entryTime;
    private javax.swing.JTextField entryUsername1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tablaUsuariosActivos;
    // End of variables declaration//GEN-END:variables
    public void listarMicrotik() {
        Consultas consultas = new Consultas();
        ArrayList<String> nombreMicrotik = consultas.nombresMicrotiks();
        for (String microtiks : nombreMicrotik) {
            comboMicrotik.addItem(microtiks);
        }
    }

    public void remoteAddres(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesión

            // Ejecutar el comando para obtener los servidores Hotspot
            List<Map<String, String>> results = con.execute("/ip/hotspot/print");

            // Limpiar ítems anteriores del combo box
            comboServer.removeAllItems();

            // Agregar los nombres al combo box
            for (Map<String, String> result : results) {
                String serverName = result.get("name");
                if (serverName != null && !serverName.isEmpty()) {
                    comboServer.addItem(serverName);
                }
            }

            con.close(); // Cerrar conexión
        } catch (MikrotikApiException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void obtenerUserProfiles(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conexión al router
            con.login(username, password); // Inicio de sesión

            // Ejecutar el comando para obtener los perfiles de usuario de Hotspot
            List<Map<String, String>> results = con.execute("/ip/hotspot/user/profile/print");

            // Limpiar el comboBox antes de insertar nuevos ítems
            comboProfile.removeAllItems();

            // Recorrer los resultados e insertar los nombres al combo
            for (Map<String, String> result : results) {
                String userProfile = result.get("name");
                if (userProfile != null && !userProfile.isEmpty()) {
                    comboProfile.addItem(userProfile);
                }
            }

            con.close(); // Cerrar conexión
        } catch (MikrotikApiException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void creacionUsuariosRandom() {
        String tiempo = entryTime.getText().trim(); // Ejemplo: 00:05:00
        String server = (String) comboServer.getSelectedItem();
        String profile = (String) comboProfile.getSelectedItem();
        String cantidadTexto = entryCantidadUsuarios.getText().trim();

        // Validación de tiempo (formato hh:mm:ss)
        if (!tiempo.matches("^([0-1]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$")) {
            JOptionPane.showMessageDialog(null, "El tiempo debe estar en formato hh:mm:ss", "Formato inválido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de server y profile
        if (server == null || server.isEmpty() || profile == null || profile.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Selecciona un servidor y un perfil válidos", "Datos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de cantidad
        int cantidad;
        try {
            cantidad = Integer.parseInt(cantidadTexto);
            if (cantidad <= 0) {
                JOptionPane.showMessageDialog(null, "La cantidad debe ser un número positivo", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Cantidad inválida, debe ser un número", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener modelo de tabla
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0); // Limpiar la tabla

        // Generar usuarios
        for (int i = 0; i < cantidad; i++) {
            String usuario = generarRandom(5);
            String contrasena = generarRandom(5);

            Object[] fila = new Object[5];
            fila[0] = usuario;
            fila[1] = contrasena;
            fila[2] = server;
            fila[3] = profile;
            fila[4] = tiempo;

            modelo.addRow(fila);
        }

        jTable1.setModel(modelo);
    }

    public String generarRandom(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder sb = new StringBuilder();
        Random rand = new Random();
        for (int i = 0; i < length; i++) {
            sb.append(chars.charAt(rand.nextInt(chars.length())));
        }
        return sb.toString();
    }
    public void enviarUsuariosAMikrotik(String mikrotikUser, String mikrotikPass, String mikrotikIP) {
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        int total = modelo.getRowCount();

        if (total == 0) {
            JOptionPane.showMessageDialog(null, "No hay usuarios para enviar", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ejecutar en segundo hilo
        new Thread(() -> {
            try {
                ApiConnection con = ApiConnection.connect(mikrotikIP);
                con.login(mikrotikUser, mikrotikPass);

                // Configurar barra de progreso
                barraProgreso1.setMaximum(total);
                barraProgreso1.setValue(0);

                for (int i = 0; i < total; i++) {
                    String usuario = String.valueOf(modelo.getValueAt(i, 0));
                    String password = String.valueOf(modelo.getValueAt(i, 1));
                    String server = String.valueOf(modelo.getValueAt(i, 2));
                    String profile = String.valueOf(modelo.getValueAt(i, 3));
                    String tiempo = String.valueOf(modelo.getValueAt(i, 4));

                    // Validaciones
                    if (usuario.length() != 5 || password.length() != 5
                            || server.isEmpty() || profile.isEmpty()
                            || !tiempo.matches("^([0-1]\\d|2[0-3]):[0-5]\\d:[0-5]\\d$")) {
                        JOptionPane.showMessageDialog(null, "Fila " + (i + 1) + " tiene datos inválidos. Se omitirá.", "Validación", JOptionPane.WARNING_MESSAGE);
                        continue;
                    }
                    String comando = String.format(
                            "/ip/hotspot/user/add name=%s password=%s server=%s profile=\"%s\" limit-uptime=%s",
                            usuario, password, server, profile, tiempo
                    );
                    // Enviar al MikroTik
                    con.execute(comando);

                    // Actualizar progreso
                    barraProgreso1.setValue(i + 1);
                }


                con.close();
                JOptionPane.showMessageDialog(null, "Todos los usuarios fueron enviados exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                generarPDF_VouchersEstiloTabla();

            } catch (MikrotikApiException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Error en conexión MikroTik: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }
    
    public void crearSchedulerLimpieza(String user, String pass, String host) {
        new Thread(() -> {
            try {
                ApiConnection con = ApiConnection.connect(host);
                con.login(user, pass);

                String comandoScheduler = "/system/scheduler/add name=\"auto-limpieza-hotspot\" interval=1m start-time=startup "
                        + "on-event=\"/system script run limpiar-usuarios-hotspot\"";

                con.execute(comandoScheduler);
                con.close();

                JOptionPane.showMessageDialog(null, "✅ Scheduler creado correctamente en MikroTik.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (MikrotikApiException e) {
                JOptionPane.showMessageDialog(null, "❌ Error al crear scheduler: " + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }
    
    public void cargarUsuariosActivos(String username, String password, String host) {
        try {
            ApiConnection con = ApiConnection.connect(host);
            con.login(username, password);

            // Ejecutar el comando
            List<Map<String, String>> resultados = con.execute("/ip/hotspot/active/print");

            // Preparar el modelo de la tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("Usuario");
            modelo.addColumn("IP");
            modelo.addColumn("Uptime");

            for (Map<String, String> fila : resultados) {
                String usuario = fila.getOrDefault("user", "Desconocido");
                String ip = fila.getOrDefault("address", "0.0.0.0");
                String tiempo = fila.getOrDefault("uptime", "00:00:00");

                modelo.addRow(new Object[]{usuario, ip, tiempo});
            }

            tablaUsuariosActivos.setModel(modelo);
            con.close();

        } catch (MikrotikApiException e) {
            JOptionPane.showMessageDialog(null, "❌ Error al obtener usuarios activos:\n" + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    public void generarPDF_VouchersEstiloTabla() {
        int confirm = JOptionPane.showConfirmDialog(null, "¿Deseas generar un PDF tipo tabla con los vouchers?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            String userHome = System.getProperty("user.home");
            String desktopFolder = Locale.getDefault().getLanguage().equals("es") ? "Escritorio" : "Desktop";
            String pdfPath = Paths.get(userHome, desktopFolder, "VouchersHotspot.pdf").toString();

            // Documento A4 horizontal
            Document document = new Document(PageSize.A4.rotate(), 10, 10, 10, 10);
            PdfWriter.getInstance(document, new FileOutputStream(pdfPath));
            document.open();

            Font font = new Font(Font.HELVETICA, 10, Font.NORMAL);
            Font fontBold = new Font(Font.HELVETICA, 10, Font.BOLD);

            PdfPTable tabla = new PdfPTable(4); // 4 columnas
            tabla.setWidthPercentage(100);
            tabla.getDefaultCell().setPadding(10f);
            tabla.getDefaultCell().setBorder(Rectangle.BOX);

            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            int total = modelo.getRowCount();

            for (int i = 0; i < total; i++) {
                String usuario = String.valueOf(modelo.getValueAt(i, 0));
                String password = String.valueOf(modelo.getValueAt(i, 1));
                String tiempo = String.valueOf(modelo.getValueAt(i, 4));
                String perfil = String.valueOf(modelo.getValueAt(i, 3));

                // Contenido del voucher
                Paragraph p = new Paragraph();
                p.add(new Phrase("Login:    ", fontBold));
                p.add(new Phrase(usuario + "\n", font));
                p.add(new Phrase("Password: ", fontBold));
                p.add(new Phrase(password + "\n\n", font));
                p.add(new Phrase("Tiempo:   ", fontBold));
                p.add(new Phrase(tiempo + "\n", font));
                p.add(new Phrase("Perfil:   ", fontBold));
                p.add(new Phrase(perfil, font));

                PdfPCell celda = new PdfPCell(p);
                celda.setPadding(10f);
                celda.setFixedHeight(100f);
                celda.setBorder(Rectangle.BOX);
                tabla.addCell(celda);
            }

            // Llenar espacios vacíos si no es múltiplo de 4
            int resto = total % 4;
            if (resto != 0) {
                for (int i = 0; i < (4 - resto); i++) {
                    PdfPCell vacia = new PdfPCell(new Phrase(""));
                    vacia.setBorder(Rectangle.NO_BORDER);
                    tabla.addCell(vacia);
                }
            }

            document.add(tabla);
            document.close();

            // Abrir el PDF automáticamente
            Desktop.getDesktop().open(new File(pdfPath));
            JOptionPane.showMessageDialog(null, "✅ PDF generado correctamente en:\n" + pdfPath);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "❌ Error al generar el PDF:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void eliminarUsuarioActivo(String username, String password, String host) {
    int filaSeleccionada = tablaUsuariosActivos.getSelectedRow();

    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(null, "Selecciona un usuario activo en la tabla.", "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String userSeleccionado = String.valueOf(tablaUsuariosActivos.getValueAt(filaSeleccionada, 0));
    String ipSeleccionado = String.valueOf(tablaUsuariosActivos.getValueAt(filaSeleccionada, 1));

    try {
        ApiConnection con = ApiConnection.connect(host);
        con.login(username, password);

        // Buscar al usuario en la lista de activos
        List<Map<String, String>> activos = con.execute("/ip/hotspot/active/print");

        String idUsuario = null;
        for (Map<String, String> activo : activos) {
            if (userSeleccionado.equals(activo.get("user")) && ipSeleccionado.equals(activo.get("address"))) {
                idUsuario = activo.get(".id");
                break;
            }
        }

        if (idUsuario == null) {
            JOptionPane.showMessageDialog(null, "No se encontró el usuario activo en MikroTik.", "Error", JOptionPane.ERROR_MESSAGE);
            con.close();
            return;
        }

        // Ejecutar comando para removerlo
        con.execute("/ip/hotspot/active/remove .id=" + idUsuario);
        con.close();

        JOptionPane.showMessageDialog(null, "✅ Usuario desconectado correctamente.");

        // Recargar tabla si deseas
        cargarUsuariosActivos(username, password, host);

    } catch (MikrotikApiException e) {
        JOptionPane.showMessageDialog(null, "❌ Error al desconectar usuario:\n" + e.getMessage(), "Error MikroTik", JOptionPane.ERROR_MESSAGE);
    }
}

    public void buscarUsuarioEnTabla() {
        String usuarioBuscado = jTextField2.getText().trim();

        if (usuarioBuscado.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingresa un nombre de usuario para buscar.", "Campo vacío", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tablaUsuariosActivos.getModel();
        int filas = modelo.getRowCount();
        boolean encontrado = false;

        for (int i = 0; i < filas; i++) {
            String usuario = String.valueOf(modelo.getValueAt(i, 0));
            if (usuario.equalsIgnoreCase(usuarioBuscado)) {
                tablaUsuariosActivos.setRowSelectionInterval(i, i); // Seleccionar fila
                tablaUsuariosActivos.scrollRectToVisible(tablaUsuariosActivos.getCellRect(i, 0, true)); // Desplazar
                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(null, "Usuario no encontrado en la tabla.", "Sin coincidencias", JOptionPane.INFORMATION_MESSAGE);
        }
    }

}
