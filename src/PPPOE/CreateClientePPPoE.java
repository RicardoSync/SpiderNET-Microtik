/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package PPPOE;

import Config.Consultas;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import me.legrange.mikrotik.ApiConnection;
import me.legrange.mikrotik.MikrotikApiException;
import microtik.PPoEAuto;
import Config.Conexion;
import java.sql.*;
/**
 *
 * @author ricardo
 */
public class CreateClientePPPoE extends javax.swing.JInternalFrame {

    /**
     * Creates new form CreateClientePPPoE
     */
    public CreateClientePPPoE() {
        initComponents();
        listarMicrotik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submenu_secret = new javax.swing.JPopupMenu();
        click_update_secret = new javax.swing.JMenuItem();
        click_delete_secret = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        entryNombre = new javax.swing.JTextField();
        entryPasswordUser = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        entryProfile = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        comboMicrotik = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        entryUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        entryPassword = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        entryHost = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        click_update_secret.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lapiz.png"))); // NOI18N
        click_update_secret.setText("Editar");
        click_update_secret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_update_secretActionPerformed(evt);
            }
        });
        submenu_secret.add(click_update_secret);

        click_delete_secret.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/borrar.png"))); // NOI18N
        click_delete_secret.setText("Eliminar");
        click_delete_secret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                click_delete_secretActionPerformed(evt);
            }
        });
        submenu_secret.add(click_delete_secret);

        setClosable(true);
        setTitle("Crear un Cliente PPPoE");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Cuenta"));

        jLabel4.setText("Nombre");

        jLabel5.setText("Contrase√±a");

        jLabel6.setText("Profile");

        entryProfile.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(entryProfile)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(entryPasswordUser, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(entryNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(entryPasswordUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(entryProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Profiles"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Local addres", "Remote Addres", "Rate Limit"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/caja.png"))); // NOI18N
        jButton1.setText("Aplicar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta"));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/perno-circular-del-tapon.png"))); // NOI18N
        jButton2.setText("Conectar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Microtik");

        jLabel1.setText("Username");

        entryUsername.setEditable(false);

        jLabel2.setText("Password");

        entryPassword.setEditable(false);

        jLabel3.setText("Host");

        entryHost.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(entryUsername)
                            .addComponent(entryHost))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel7)
                    .addComponent(comboMicrotik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(entryUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(entryPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entryHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Secret"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Password", "Profile"
            }
        ));
        jTable2.setComponentPopupMenu(submenu_secret);
        jTable2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable2AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void listarMicrotik() {
        Consultas consultas = new Consultas();
        ArrayList<String> nombreMicrotik = consultas.nombresMicrotiks();
        for (String microtiks : nombreMicrotik) {
            comboMicrotik.addItem(microtiks);
        }
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int rows = jTable1.getSelectedRow();
        if(rows >=0){String profile = (String)jTable1.getValueAt(rows, 0); entryProfile.setText(profile);}
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //String nombre, String contrase√±a, String perfil, String user, String password, String hos
        String nombre = entryNombre.getText();
        String password = entryPasswordUser.getText();
        String perfil = entryProfile.getText();
        String user = entryUsername.getText();
        String passwordMicrotik = entryPassword.getText();
        String host = entryHost.getText();
        
        if(nombre.isBlank() && password.isBlank() && perfil.isBlank() && user.isBlank() && passwordMicrotik.isBlank() && host.isBlank()){
            JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios");
        }else{
            PPoEAuto auto = new PPoEAuto();
            nombre = nombre.trim();
            nombre = nombre.replaceAll("[^a-zA-Z0-9]", "");
            auto.crearClientePPPoE(nombre, password, perfil, user, passwordMicrotik, host);
            secretsCount(user, passwordMicrotik, host);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String microtikSelect = (String) comboMicrotik.getSelectedItem();
        if (microtikSelect == null) {
            JOptionPane.showMessageDialog(null, "Por favor selecciona el microtik a realizar configuracion. Si no aparecen, registra uno");
        } else {
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();
            String sql = "SELECT ip, username, password FROM credenciales_microtik WHERE nombre = ? LIMIT 1";
            if (cn != null) {
                PreparedStatement cursor;
                ResultSet resultado;
                try {
                    cursor = cn.prepareStatement(sql);
                    cursor.setString(1, microtikSelect);

                    resultado = cursor.executeQuery();

                    if (resultado.next()) {
                        String ip = resultado.getString("ip");
                        String username = resultado.getString("username");
                        String password = resultado.getString("password");

                        entryHost.setText(ip);
                        entryUsername.setText(username);
                        entryPassword.setText(password);
                        profiles(username, password, ip);
                        secretsCount(username, password, ip);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Problemas con la consulta del microtik: " + e, "SpiderNET", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable2AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable2AncestorAdded


        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2AncestorAdded

    private void click_delete_secretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_delete_secretActionPerformed
        String username = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        
        int fila = jTable2.getSelectedRow();
        if (fila >=0){
            String name = (String)jTable2.getValueAt(fila, 0);
            PPoEAuto auto = new PPoEAuto();
            auto.eliminarSecret(name, username, password, host);            
        }else{
            JOptionPane.showMessageDialog(null, "Primero selecicona un elemento");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_click_delete_secretActionPerformed

    private void click_update_secretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_click_update_secretActionPerformed
        updateSecretUno();
        // TODO add your handling code here:
    }//GEN-LAST:event_click_update_secretActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem click_delete_secret;
    private javax.swing.JMenuItem click_update_secret;
    private javax.swing.JComboBox<String> comboMicrotik;
    private javax.swing.JTextField entryHost;
    private javax.swing.JTextField entryNombre;
    private javax.swing.JTextField entryPassword;
    private javax.swing.JTextField entryPasswordUser;
    private javax.swing.JTextField entryProfile;
    private javax.swing.JTextField entryUsername;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JPopupMenu submenu_secret;
    // End of variables declaration//GEN-END:variables
    public void profiles(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesi√≥n en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ppp/profile/print ");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[4];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get("name");
                clientesDhcpLeases[1] = result.get("local-address");
                clientesDhcpLeases[2] = result.get("remote-address");
                clientesDhcpLeases[3] = result.get("rate-limit");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            jTable1.setModel(modelo);

            // Cerrar la conexi√≥n con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepci√≥n
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }


    public void secretsCount(String username, String password, String ip) {
        try {
            ApiConnection con = ApiConnection.connect(ip); // Conectar al router
            con.login(username, password); // Iniciar sesi√≥n en el router

            // Ejecutar el comando para obtener las leases DHCP bloqueadas
            List<Map<String, String>> results = con.execute("/ppp/secret/print");

            // Inicializar el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();

            // Limpiar cualquier dato previo en la tabla
            modelo.setRowCount(0);

            // Iterar sobre los resultados y agregar las filas a la tabla
            for (Map<String, String> result : results) {
                Object[] clientesDhcpLeases = new Object[4];

                // Asignar los valores a cada columna
                clientesDhcpLeases[0] = result.get(".id");
                clientesDhcpLeases[1] = result.get("name");
                clientesDhcpLeases[2] = result.get("password");
                clientesDhcpLeases[3] = result.get("profile");
                

                // Agregar la fila al modelo de la tabla
                modelo.addRow(clientesDhcpLeases);
            }

            // Establecer el modelo actualizado a la tabla
            jTable2.setModel(modelo);

            // Cerrar la conexi√≥n con el router
            con.close();
        } catch (MikrotikApiException e) {
            // Mostrar mensaje de error si ocurre una excepci√≥n
            JOptionPane.showMessageDialog(null, "Error: " + e, "MikroTik", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void updateSecretUno(){
        String username = entryUsername.getText();
        String password = entryPassword.getText();
        String host = entryHost.getText();
        
        int fila = jTable2.getSelectedRow();
        if (fila >=0){
            String id = (String)jTable2.getValueAt(fila, 0);
            String user = (String)jTable2.getValueAt(fila, 1);
            String pass = (String)jTable2.getValueAt(fila, 2);
            String profile = (String)jTable2.getValueAt(fila, 3);
            PPoEAuto auto = new PPoEAuto();
            auto.updateSecret(id, user, pass, profile, username, password, host);
        }else{
            JOptionPane.showMessageDialog(null, "Selecciona un elemento primero");
        }
    }
}
