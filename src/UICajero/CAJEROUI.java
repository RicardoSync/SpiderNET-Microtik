/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UICajero;

import Config.Conexion;
import Recibos.pagoWindows;
import UIPrincipal.Dashboard;
import caja.verificadorCodigo;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import UIPrincipal.Login;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author ricardo
 */
public class CAJEROUI extends javax.swing.JFrame {

    /**
     * Creates new form CAJEROUI
     */
    public CAJEROUI(String usuario) {
        initComponents();
        listarClientes();
        insertarUsuario(usuario);
        configurarTeclas();
        consultarPagos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        entryNombre = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        entryUsuario = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        entryNombre1 = new javax.swing.JTextField();
        btnNombre = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        comboMes = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        entryAnnio = new javax.swing.JTextField();
        btnFechas = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        desktopAreaCobro = new javax.swing.JDesktopPane();

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cartera.png"))); // NOI18N
        jMenuItem1.setText("Registrar Pago");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CAJERO ADMINET");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Busqueda Cliente"));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Ingrese el nombre, telefono o IP");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/busqueda.png"))); // NOI18N
        jButton1.setText("Buscar Cliente");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entryNombre)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entryNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Clientes"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Telefono", "Microtik/OLT", "Direccion", "Instalacion", "Paquete", "IP Cliente", "Corte", "Antena AP", "TV", "Strem"
            }
        ));
        jTable1.setComponentPopupMenu(jPopupMenu1);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1041, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("INICIO COMO"));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/A7-usuario-cajero.png"))); // NOI18N

        entryUsuario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        entryUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryUsuarioActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Lo esta atendiendo:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entryUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entryUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("RECARGAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("VERIFICAR RECIBO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("CERRAR SESION");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("INICIO", jPanel1);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));

        jLabel3.setText("Nombre cliente");

        btnNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/busqueda.png"))); // NOI18N
        btnNombre.setText("Buscar nombre");
        btnNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNombreActionPerformed(evt);
            }
        });

        jLabel4.setText("Mes");

        comboMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jLabel5.setText("Año");

        entryAnnio.setText("2025");

        btnFechas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtrar.png"))); // NOI18N
        btnFechas.setText("Buscar por fecha");
        btnFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFechasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entryNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNombre)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(entryAnnio, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFechas)
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(entryNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNombre)
                    .addComponent(jLabel4)
                    .addComponent(comboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(entryAnnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFechas))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Cantidad", "Fecha", "Metodo", "Pago con", "Cambio de"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Historial de Pagos", jPanel5);

        javax.swing.GroupLayout desktopAreaCobroLayout = new javax.swing.GroupLayout(desktopAreaCobro);
        desktopAreaCobro.setLayout(desktopAreaCobroLayout);
        desktopAreaCobroLayout.setHorizontalGroup(
            desktopAreaCobroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1069, Short.MAX_VALUE)
        );
        desktopAreaCobroLayout.setVerticalGroup(
            desktopAreaCobroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopAreaCobro, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopAreaCobro)
        );

        jTabbedPane1.addTab("Area de Cobro", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1069, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void configurarTeclas() {
        // Obtener input y action map del componente raíz (puede ser jTable1 o JFrame)
        InputMap inputMap = jTable1.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap actionMap = jTable1.getActionMap();

        // Asignar F5
        inputMap.put(KeyStroke.getKeyStroke("F5"), "pagarCliente");
        // Asignar F11
        inputMap.put(KeyStroke.getKeyStroke("F11"), "pagarCliente");

        actionMap.put("pagarCliente", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                realizarPagoSeleccionado();
            }
        });
    }
    private void realizarPagoSeleccionado() {
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada >= 0) {
            int id = (int) jTable1.getValueAt(filaSeleccionada, 0);
            String nombre = (String) jTable1.getValueAt(filaSeleccionada, 1);
            String paquete = (String) jTable1.getValueAt(filaSeleccionada, 6);
            String direccionIp = (String) jTable1.getValueAt(filaSeleccionada, 7);
            String servicios = (String) jTable1.getValueAt(filaSeleccionada, 11);
            String nombreMicrotik = (String) jTable1.getValueAt(filaSeleccionada, 3);
            String diaCorte = (String) jTable1.getValueAt(filaSeleccionada, 8);
            String username = entryUsuario.getText();
            // Cambiar a la pestaña 3 (índice 2)
            jTabbedPane1.setSelectedIndex(2);
            pagoWindows w = new pagoWindows(id, nombre, paquete, servicios, direccionIp, nombreMicrotik, diaCorte, username);
            CAJEROUI.desktopAreaCobro.add(w);
            w.show();
            
        } else {
            JOptionPane.showMessageDialog(null, "Para registrar un pago, seleccione el cliente", "SpiderNET", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String busqueda = entryNombre.getText();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        jTable1.setRowSorter(sorter);

        if (busqueda.isBlank()) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa un valor");
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + busqueda));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNombreActionPerformed
        String busqueda = entryNombre1.getText();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        jTable2.setRowSorter(sorter);

        if (busqueda.isBlank()) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa un valor");
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + busqueda));
        } 
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNombreActionPerformed

    private void btnFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFechasActionPerformed
        filtradoFecha();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFechasActionPerformed

    private void entryUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entryUsuarioActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listarClientes();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        verificadorCodigo codigo = new verificadorCodigo();
        codigo.verificarCodigoEnBD();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Login l = new Login();
        l.setVisible(true);
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int filaSeleccionada;
        filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada >= 0) {
            int id = (int) jTable1.getValueAt(filaSeleccionada, 0);
            String nombre = (String) jTable1.getValueAt(filaSeleccionada, 1);
            String paquete = (String) jTable1.getValueAt(filaSeleccionada, 6);
            String direccionIp = (String) jTable1.getValueAt(filaSeleccionada, 7);
            String servicios = (String) jTable1.getValueAt(filaSeleccionada, 11);
            String nombreMicrotik = (String)jTable1.getValueAt(filaSeleccionada, 3);
            String diaCorte = (String)jTable1.getValueAt(filaSeleccionada, 8);
            String username = entryUsuario.getText();
            pagoWindows w = new pagoWindows(id, nombre, paquete, servicios, direccionIp, nombreMicrotik, diaCorte, username);
            CAJEROUI.desktopAreaCobro.add(w);
            w.show();

        } else {
            JOptionPane.showMessageDialog(null, "Para registrar un pago, seleccione el cliente", "SpiderNET", JOptionPane.WARNING_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFechas;
    private javax.swing.JButton btnNombre;
    private javax.swing.JComboBox<String> comboMes;
    public static javax.swing.JDesktopPane desktopAreaCobro;
    private javax.swing.JTextField entryAnnio;
    private javax.swing.JTextField entryNombre;
    private javax.swing.JTextField entryNombre1;
    private javax.swing.JTextField entryUsuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables


    private void listarClientes() {
        Conexion conexion = new Conexion();
        Connection cn = conexion.getConnection();

        if (cn != null) {
            Statement st = null;
            ResultSet rs = null;

            try {
                String sql = """
                            SELECT 
                             c.id,
                             c.nombre,
                             c.telefono,
                             cm.nombre AS microtik_nombre,
                             c.direccion,
                             DATE_FORMAT(c.fecha_registro, '%d/%m/%Y') AS fecha_registro,
                             p.nombre AS paquete,
                             c.ip_cliente,
                             c.dia_corte,
                             a.nombre AS antena_ap,
                             c.serviciosTV,
                             sp.nombre AS servicio_plataforma
                         FROM clientes c
                         LEFT JOIN paquetes p ON c.id_paquete = p.id
                         LEFT JOIN credenciales_microtik cm ON c.id_microtik = cm.id
                         LEFT JOIN antenasap a ON c.id_antena_ap = a.idantenasAp
                         LEFT JOIN serviciosplataforma sp ON c.id_servicio_plataforma = sp.idPlataformas;
                         """;
                DefaultTableModel modelo;
                st = cn.createStatement();
                rs = st.executeQuery(sql);
                Object[] clientes = new Object[12];

                modelo = (DefaultTableModel) jTable1.getModel();
                modelo.setRowCount(0);

                while (rs.next()) {
                    clientes[0] = rs.getInt("id");
                    clientes[1] = rs.getString("nombre");
                    clientes[2] = rs.getString("telefono");
                    clientes[3] = rs.getString("microtik_nombre");
                    clientes[4] = rs.getString("direccion");
                    clientes[5] = rs.getString("fecha_registro");
                    clientes[6] = rs.getString("paquete");
                    clientes[7] = rs.getString("ip_cliente");
                    clientes[8] = rs.getString("dia_corte");
                    clientes[9] = rs.getString("antena_ap");
                    clientes[10] = rs.getString("serviciosTV");
                    clientes[11] = rs.getString("servicio_plataforma");

                    modelo.addRow(clientes);
                }

                jTable1.setModel(modelo);

                // 🔥 AQUI: Agregar ordenamiento con TableRowSorter
                TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
                jTable1.setRowSorter(sorter);

                // (Opcional) Ordenar por nombre alfabéticamente por defecto
                // sorter.setSortKeys(Arrays.asList(new RowSorter.SortKey(1, SortOrder.ASCENDING)));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, "Error al listar los clientes: " + e, "SpiderNET", JOptionPane.ERROR_MESSAGE);
            } finally {
                conexion.closeConnection();
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "No logramos establecer una conexion", "Modulo Clientes", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void insertarUsuario(String usuario){
        entryUsuario.setText(usuario);
    }
    public void filtradoFecha() {
        int mes = Integer.parseInt((String) comboMes.getSelectedItem());
        int annio = Integer.parseInt(entryAnnio.getText());
        Conexion conexion = new Conexion();
        Connection cn = conexion.getConnection();

        if (cn != null) {
            PreparedStatement cursor;
            ResultSet resultado;
            String sql = """
                     SELECT c.nombre, p.monto, DATE_FORMAT(p.fecha_pago, '%m-%Y') AS mes_anio, p.metodo_pago
                     FROM pagos p
                     LEFT JOIN clientes c ON p.id_cliente = c.id
                     WHERE YEAR(p.fecha_pago) = ? AND MONTH(p.fecha_pago) = ?;
                     """;

            try {
                DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();
                modelo.setRowCount(0); // Limpiar la tabla antes de insertar nuevos datos

                cursor = cn.prepareStatement(sql);
                cursor.setInt(1, annio);
                cursor.setInt(2, mes);

                resultado = cursor.executeQuery();
                boolean hayResultados = false;

                while (resultado.next()) {
                    hayResultados = true;
                    Object[] cliente = new Object[4];
                    cliente[0] = resultado.getString("nombre");
                    cliente[1] = resultado.getString("monto");
                    cliente[2] = resultado.getString("mes_anio");
                    cliente[3] = resultado.getString("metodo_pago");
                    modelo.addRow(cliente);
                }

                jTable2.setModel(modelo);

                // Si no hay resultados, mostrar una notificación
                if (!hayResultados) {
                    JOptionPane.showMessageDialog(null, "No hay pagos registrados para " + mes + "-" + annio, "SpiderNET", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al filtrar los pagos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    public void buscarNombreCliente() {
        String nombreCliente = entryNombre.getText().trim();  // Eliminar espacios extra

        if (!nombreCliente.isEmpty()) {
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();

            if (cn != null) {
                PreparedStatement cursor;
                ResultSet resultado;
                String sql = """
                         SELECT c.nombre, p.monto, p.fecha_pago, p.metodo_pago
                         FROM pagos p
                         LEFT JOIN clientes c ON p.id_cliente = c.id
                         WHERE c.nombre LIKE ?;
                         """;

                try {
                    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                    modelo.setRowCount(0);

                    cursor = cn.prepareStatement(sql);
                    cursor.setString(1, nombreCliente + "%");  // Agregar el "%" en el parámetro
                    resultado = cursor.executeQuery();

                    Object[] pagos = new Object[4];
                    boolean hayResultado = false;

                    while (resultado.next()) {
                        hayResultado = true;
                        pagos[0] = resultado.getString("nombre");
                        pagos[1] = resultado.getString("monto");
                        pagos[2] = resultado.getString("fecha_pago");
                        pagos[3] = resultado.getString("metodo_pago");
                        modelo.addRow(pagos);
                    }

                    jTable1.setModel(modelo);

                    if (!hayResultado) {
                        JOptionPane.showMessageDialog(null, "No se encontraron pagos de este cliente: " + nombreCliente + " verifica su nombre", "SpiderNET", JOptionPane.WARNING_MESSAGE);
                    }

                    resultado.close();
                    cursor.close();
                    cn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "No podemos encontrar y/o listar este cliente", "SpiderNET", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No podemos buscar un cliente sin nombre, no seas imbecil!!", "SpiderNET", JOptionPane.WARNING_MESSAGE);
        }
    }
    public void consultarPagos() {
        Conexion conexion = new Conexion();
        Connection cn = conexion.getConnection();

        if (cn != null) {
            PreparedStatement cursor;
            ResultSet resultado;

            try {
                String sql = """
                             SELECT c.nombre, p.monto, p.fecha_pago, p.metodo_pago, p.cantidad, p.cambio, p.proximo_pago
                             FROM pagos p
                             LEFT JOIN clientes c ON p.id_cliente = c.id;
                             """;
                cursor = cn.prepareCall(sql);
                resultado = cursor.executeQuery();

                DefaultTableModel modelo;

                Object[] pagos = new Object[7];
                modelo = (DefaultTableModel) jTable2.getModel();
                modelo.setRowCount(0);

                while (resultado.next()) {
                    pagos[0] = resultado.getString("nombre");
                    pagos[1] = resultado.getString("monto");
                    pagos[2] = resultado.getString("fecha_pago");
                    pagos[3] = resultado.getString("metodo_pago");
                    pagos[4] = resultado.getString("cantidad");
                    pagos[5] = resultado.getString("cambio");
                    pagos[6] = resultado.getString("proximo_pago");

                    modelo.addRow(pagos);
                }
                jTable2.setModel(modelo);
            } catch (SQLException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "No podemos listar los pagos");
            }
        }
    }

}
