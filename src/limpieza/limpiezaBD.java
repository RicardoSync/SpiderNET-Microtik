/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package limpieza;

import Config.Conexion;
import javax.swing.SwingWorker;
import java.sql.*;
import java.util.List;
import javax.swing.JOptionPane;
/**
 *
 * @author ricardo
 */
public class limpiezaBD extends javax.swing.JInternalFrame {

    /**
     * Creates new form limpiezaBD
     */
    public limpiezaBD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Limpieza total");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/material-peligroso.png"))); // NOI18N
        jLabel1.setText("Esto elimina todos los registros de la base de datos!");

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Progreso...");

        jButton1.setText("Iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jButton1)
                .addContainerGap(168, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpiarBaseDatosConProgreso();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables


public void limpiarBaseDatosConProgreso() {
    SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
        @Override
        protected Void doInBackground() {
            // Conectar a la base de datos
            Conexion conexion = new Conexion();
            Connection cn = conexion.getConnection();
            if (cn == null) {
                publish("Error: No se pudo conectar a la base de datos.");
                return null;
            }
            
            Statement st = null;
            try {
                st = cn.createStatement();
                publish("Deshabilitando comprobación de llaves foráneas...");
                st.execute("SET FOREIGN_KEY_CHECKS=0;");
                
                // Lista de tablas a limpiar. El orden es importante si existen restricciones,
                // pero al deshabilitar las llaves foráneas se simplifica.
                String[] tablas = {
                    "tickets", "pppoe_ususarios", "profile", "serviciosplataforma",
                    "queue_parent", "pagos", "instalaciones", "fallas", "equipos",
                    "egresos", "clientes", "credenciales_microtik", "antenasap",
                    "datosempresa", "cortes_caja", "paquetes", "usuarios"
                };
                int total = tablas.length;
                int count = 0;
                
                for (String tabla : tablas) {
                    publish("Limpiando tabla: " + tabla);
                    st.executeUpdate("DELETE FROM " + tabla);
                    count++;
                    int progreso = (int) ((count * 100.0) / total);
                    setProgress(progreso);
                    publish("Tabla " + tabla + " limpiada (" + progreso + "% completado)");
                    
                    // Opcional: espera corta para simular procesamiento
                    Thread.sleep(100);
                }
                
                publish("Rehabilitando comprobación de llaves foráneas...");
                st.execute("SET FOREIGN_KEY_CHECKS=1;");
                publish("La base de datos se ha limpiado completamente.");
            } catch (Exception e) {
                publish("Error durante la limpieza: " + e.getMessage());
            } finally {
                try {
                    if (st != null) st.close();
                    if (cn != null) cn.close();
                } catch (SQLException ex) {
                    publish("Error al cerrar recursos: " + ex.getMessage());
                }
            }
            return null;
        }

        @Override
        protected void process(List<String> chunks) {
            // Se actualiza el JLabel con el último mensaje recibido
            String ultimoMensaje = chunks.get(chunks.size() - 1);
            jLabel2.setText(ultimoMensaje);
        }

        @Override
        protected void done() {
            JOptionPane.showMessageDialog(null, "Proceso de limpieza finalizado.");
        }
    };

    // Escuchar cambios en la propiedad "progress" para actualizar la barra de progreso
    worker.addPropertyChangeListener(evt -> {
        if ("progress".equals(evt.getPropertyName())) {
            int progreso = (Integer) evt.getNewValue();
            jProgressBar1.setValue(progreso);
        }
    });

    worker.execute();
}

}
